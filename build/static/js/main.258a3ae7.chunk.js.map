{"version":3,"sources":["redux/selectors/index.js","redux/actions/index.js","components/slider.js","components/navbar.js","components/gridCanvas.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getGridSize","store","gridSize","getGridData","gridData","changeGridSize","type","payload","Slider","props","state","isDragging","originalX","translateX","lastTranslateX","boundingWidth","maxGridSize","currGridSize","handleMouseDown","bind","handleMouseMove","handleMouseUp","xPosition","this","refs","barRef","clientWidth","setState","window","removeEventListener","ev","clientX","addEventListener","barWidth","newGridSize","Math","round","handleGridSizeChange","createNewGrid","Bar","ref","Ball","onMouseDown","x","Component","Container","styled","div","attrs","style","transform","css","connect","resetPlotColors","map","data","y","color","Navigation","handleCreateNewGrid","newGridData","i","push","floor","random","resetAllEvents","gridDataLength","length","originalGridData","JSON","parse","stringify","setGridData","handleResetGrid","handleSelectionSort","currMin","currMinIndex","temp","j","setTimeout","handleStalinsort","splice","n","handleInsertionSort","currValue","handleGnomeSort","tempGridData","counter","windowWidth","innerWidth","$dropdown","document","getElementById","paddingLeft","highestTimeoutId","clearTimeout","NewContainer","id","NewNavbar","bg","expand","Navbar","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","onClick","NavDropdown","title","Item","Form","inline","NewFormControl","placeholder","SubmitButton","variant","FormControl","Button","GridCanvas","innerHeight","gridHeight","dataSwapPoints","gridWrap","React","createRef","navbarHeight","clientHeight","forceUpdate","newProps","oldNumGridDataUpdated","numGridDataUpdated","Wrapper","stackBy","height","width","colorDomain","animation","App","canvasSize","defaultValue","Grid","Boolean","location","hostname","match","initialState","createStore","action","Object","assign","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.258a3ae7.chunk.js","sourcesContent":["export const getGridSize = store => store.gridSize;\n\nexport const getGridData = store => store.gridData;\n\nexport const getNumGridDataUpdated = store => store.numGridDataUpdated;\n","export const changeGridSize = (gridSize) => {\n    return {\n      type: 'CHANGE_GRID_SIZE',\n      payload: gridSize\n    }\n}\n\nexport const createNewGrid = (gridData) => {\n    return {\n        type: 'CREATE_NEW_GRID',\n        payload: gridData\n    }\n}\n\nexport const setGridData = (gridData) => {\n    return {\n        type: 'SET_GRID_DATA',\n        payload: gridData\n    }\n} ","import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport { connect } from 'react-redux';\nimport { getGridSize } from '../redux/selectors';\nimport { changeGridSize } from '../redux/actions';\n\nclass Slider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDragging: false,\n\n            originalX: 0,\n            translateX: 0,\n            lastTranslateX: 0,\n            boundingWidth: 0,\n\n            maxGridSize: 50,\n            currGridSize: 25\n        };\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            xPosition\n        } = this.props;\n        const { barRef } = this.refs;\n        const boundingWidth = barRef.clientWidth - 16;\n        this.setState({\n            xPosition,\n            boundingWidth,\n            translateX: boundingWidth/2,\n            lastTranslateX: boundingWidth/2\n         });\n        \n\n        // calculate initial X position here based on scale 5 - 50 x coords\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n\n    handleMouseDown(ev) {\n        let { clientX } = ev;\n        // mousemove: obtain cursor position\n        // mouseup: save position for the element\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mouseup', this.handleMouseUp);\n\n        this.setState({\n          originalX: clientX,\n          isDragging: true\n        });\n    }\n\n    handleMouseMove(ev) {\n        let { clientX } = ev;\n        const {\n            isDragging,\n            boundingWidth,\n            originalX,\n            lastTranslateX\n         } = this.state;\n         let translateX = clientX - originalX + lastTranslateX;\n\n        if (!isDragging) {\n            return;\n        }\n\n        if (translateX > boundingWidth) {\n            translateX = boundingWidth;\n        }\n        if (translateX < 0) {\n            translateX = 0;\n        }\n\n        this.setState({ translateX });\n\n        const barWidth = this.refs.barRef.clientWidth - 16;\n        const { maxGridSize } = this.state;\n        let newGridSize = Math.round(lastTranslateX/barWidth * maxGridSize);\n        newGridSize = (newGridSize > 2) ? newGridSize : 2;\n        this.setState({\n            currGridSize: newGridSize\n        })\n\n    }\n\n    handleMouseUp() {\n        this.setState({\n            originalX: 0,\n            lastTranslateX: this.state.translateX,\n            isDragging: false\n        });\n\n        this.handleGridSizeChange();\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n\n    handleGridSizeChange() {\n        const barWidth = this.refs.barRef.clientWidth - 16;\n        const { lastTranslateX, maxGridSize } = this.state;\n        const newGridSize = Math.round(lastTranslateX/barWidth * maxGridSize);\n\n        this.props.changeGridSize(newGridSize > 2 ? newGridSize : 2);\n        this.props.createNewGrid();\n    }\n\n    handleLocalGridSizeChange() {\n        const barWidth = this.refs.barRef.clientWidth - 16;\n        const { lastTranslateX, maxGridSize } = this.state;\n        let newGridSize = Math.round(lastTranslateX/barWidth * maxGridSize);\n        newGridSize = (newGridSize > 2) ? newGridSize : 2;\n        this.setState({\n            currGridSize: newGridSize\n        })\n    }\n\n    render() {\n        const {\n            translateX,\n            currGridSize,\n            isDragging\n        } = this.state;\n\n        return (\n            <Container>\n                <Bar\n                    ref=\"barRef\"\n                >\n                    <Ball\n                        ref=\"ballRef\"\n                        onMouseDown={this.handleMouseDown}\n                        x={translateX}\n                        currGridSize={currGridSize}\n                        isDragging={isDragging}   \n                    />\n                </Bar>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const gridSize = getGridSize(state);\n    return { gridSize };\n}\n\nconst Container = styled.div`\n    position: relative;\n    width: 10rem;\n    height: 2rem; \n`;\n\nconst Bar = styled.div`\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 9.5rem;\n    height: 5px;\n    border-radius: 2px;\n    background-color: #007bff;\n`;\n\n\nconst Ball = styled.div.attrs({\n    style: ({ x }) => ({\n        transform: `translate(${x}px, -50%)`\n    }),\n})`\n    cursor: grab;\n    position: absolute;\n    top: 50%;\n    left: 0;\n    transform: translateY(-50%);\n    width: 1rem;\n    height: 1rem;\n    border-radius: 50%;\n    background-color: #d3d3d3;\n\n    ::before {\n        content: '${props => props.currGridSize}';\n        position: absolute;\n        top: -50%;\n        transform: translateY(-50%);\n        font-size: 10px;\n    }\n\n    ${({ isDragging }) => \n    isDragging && css`\n        cursor: grabbing;\n    `};\n`;\n\nexport default connect(mapStateToProps, { changeGridSize })(Slider)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridData, getGridSize } from '../redux/selectors';\nimport { changeGridSize, createNewGrid, setGridData } from '../redux/actions';\n\nimport {\n    Container,\n    Button,\n    Navbar,\n    Nav,\n    Form,\n    FormControl,\n    NavDropdown\n} from 'react-bootstrap';\nimport styled from 'styled-components';\n\nimport Slider from './slider';\n\nconst resetPlotColors = (gridData) => {\n    return gridData.map(data => ({\n        x: data.x,\n        y: data.y,\n        color: 0\n    }));\n}\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            originalGridData: [],\n            gridDataLength: 0\n        }\n    }\n\n    componentDidMount() {\n        let windowWidth = window.innerWidth;\n        let $dropdown = document.getElementById('basic-nav-dropdown');\n\n        this.setState({\n            gridDataLength: this.props.gridData.length,\n            originalGridData: JSON.parse(JSON.stringify(this.props.gridData))\n        });\n\n        // fix mobile view\n        if(windowWidth < 992) {\n            $dropdown.style.paddingLeft = 0;\n        }\n    }\n\n    handleGridSizeChange = () => {\n        this.props.changeGridSize(this.state.gridSize);\n    }\n\n    handleCreateNewGrid = () => {\n        const { gridSize } = this.props;\n        let newGridData = [];\n        \n        for(let i = 0; i < gridSize; i++) {\n            newGridData.push({\n                x: i,\n                y: Math.floor(Math.random() * 25) + 1,\n                color: 0\n            })\n        }\n        this.resetAllEvents();\n        this.setState({\n            gridDataLength: newGridData.length,\n            originalGridData: JSON.parse(JSON.stringify(newGridData))\n        });\n        this.props.setGridData(newGridData);\n    }\n\n    handleResetGrid = () => {\n        this.resetAllEvents();\n        this.setState({\n            gridDataLength: this.state.originalGridData.length\n        })\n        this.props.setGridData(JSON.parse(JSON.stringify(this.state.originalGridData)));\n    }\n\n    handleSelectionSort = () => {\n        let { gridDataLength } = this.state;\n        let currMin, currMinIndex, temp, j, gridData;\n        for (let i = 0; i < gridDataLength - 1; ++i) {\n            setTimeout(() => {\n                gridData = this.props.gridData;\n                for (j = i + 1; j < gridDataLength; j++) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[i].color = 4;\n                    currMin = gridData[i].y;\n                    currMinIndex = i\n                    if (gridData[j].y < currMin) {\n                        currMin = gridData[j].y;\n                        currMinIndex = j;\n                        gridData[currMinIndex].color = 2;\n                        this.props.setGridData(gridData);\n                    }\n                    temp = gridData[i].y;\n                    gridData[i].y = currMin;\n                    gridData[currMinIndex].y = temp;\n                }\n                this.props.setGridData(gridData);\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleStalinsort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j = 0;\n        for (let i = 0; i < gridDataLength - 1; i++) {\n            setTimeout(() => {\n                if (gridData[j].y > gridData[j + 1].y) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[j].color = 4;\n                    gridData.splice(j + 1, 1);\n                    for(let n = j + 1; n < gridDataLength - (i - j) - 1; n++) {\n                        gridData[n].x--;\n                    }\n                    j--;\n                }\n                this.props.setGridData(gridData);\n                j++;\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleInsertionSort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j, currValue;\n        for (let i = 1; i < gridDataLength; i++) {\n            setTimeout(() => {\n                currValue = gridData[i].y;\n                for (j = i - 1; j >= 0 && currValue < gridData[j].y; j--) {\n                    gridData[j + 1].y = gridData[j].y;\n                    if (j + 1 === i) {\n                        gridData[i].color = 4;\n                    } else {\n                        gridData[j + 1].color = 2;\n                    }\n                    gridData[j].color = 2;\n                    this.props.setGridData(gridData);\n                }\n                gridData[j + 1].y = currValue;\n                this.props.setGridData(gridData);\n                gridData = resetPlotColors(gridData);\n                if(i === gridDataLength - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleGnomeSort = () => {\n        let { gridData } = this.props;\n        let tempGridData = JSON.parse(JSON.stringify(gridData));\n        let { gridDataLength } = this.state;\n        let i = 0, counter = 0;\n        while (i < gridDataLength) {\n            counter++;\n            if (i == 0) { i++; }\n            if (tempGridData[i].y >= tempGridData[i - 1].y) {\n                i++;\n            } else {\n                let temp = tempGridData[i].y;\n                tempGridData[i].y = tempGridData[i - 1].y;\n                tempGridData[i - 1].y = temp;\n                i--;\n            }\n        }\n        i = 0;\n        for (let j = 0; j < counter; j++) {\n            setTimeout(() => {\n                gridData = resetPlotColors(gridData);\n                if (i > 0) {\n                    gridData[i].color = 4;\n                    gridData[i - 1].color = 2;\n                    this.props.setGridData(gridData);\n                    if (gridData[i].y < gridData[i - 1].y) {\n                        let temp = gridData[i].y;\n                        gridData[i].y = gridData[i - 1].y;\n                        gridData[i - 1].y = temp;\n                        i -= 2;\n                    }\n                    this.props.setGridData(gridData);\n                }\n                i++;\n                if(j === counter - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 50 * j);\n            \n        }\n    }\n\n    resetAllEvents() {\n        let highestTimeoutId = setTimeout(\";\");\n        for (let i = 0 ; i < highestTimeoutId ; i++) {\n            clearTimeout(i); \n        }\n    }\n\n    render() {\n        const {\n            gridSize\n        } = this.state;\n        return(\n            <NewContainer id=\"navbar\">\n                <NewNavbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Viz-Sort</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={this.handleCreateNewGrid}>New</Nav.Link>\n                        <Nav.Link onClick={this.handleResetGrid}>Reset</Nav.Link>\n                        </Nav>\n                        <Slider createNewGrid={this.handleCreateNewGrid} />\n                        <NavDropdown title=\"Sorts\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item onClick={this.handleStalinsort}>Stalin Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleSelectionSort}>Selection Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleInsertionSort}>Insertion Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleGnomeSort}>Gnome Sort</NavDropdown.Item>\n                        </NavDropdown>\n                        <Form inline>\n                        <NewFormControl type=\"text\" placeholder=\"F(x)=\" className=\"size_ctrl\" />\n                        <SubmitButton variant=\"outline-success\" onClick={this.handleGridSizeChange}>Generate Graph</SubmitButton>\n                        </Form>\n                    </Navbar.Collapse>\n                </NewNavbar>\n            </NewContainer>\n        )\n    }\n}\n\nconst NewFormControl = styled(FormControl)`\n    font-family: cursive;\n`;\n\nconst NewContainer = styled(Container)`\n    width: 100%;\n    max-width: 100%;\n    margin: 0;\n    padding-left: 0;\n    padding-right: 0;\n`;\n\nconst NewNavbar = styled(Navbar)`\n    width: calc(15px + 100%);\n    border-bottom: 2px solid #eee;\n`;\n\nconst mapStateToProps = store => {\n    const gridData = getGridData(store);\n    const gridSize = getGridSize(store);\n    return { gridData, gridSize };\n}\n\n\nconst SubmitButton = styled(Button)`\n    color: #007bff;\n    margin-left: 5px;\n    border: 1px solid #007bff;\n\n    &:hover, &:active, &:focus {\n        background-color: #007bff !important;\n        border: 1px solid #007bff !important;\n        box-shadow: none !important;\n        outline: none;\n\n    }\n`;\n\nexport default connect(mapStateToProps, { changeGridSize, createNewGrid, setGridData })(Navigation);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport {\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis,\n    VerticalBarSeries\n} from 'react-vis';\n\nimport { getGridData, getNumGridDataUpdated } from '../redux/selectors';\nimport verticalBarSeries from 'react-vis/dist/plot/series/vertical-bar-series';\n\nclass GridCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            innerWidth: 200,\n            innerHeight: 200,\n            gridHeight: 0,\n            gridData: [],\n            dataSwapPoints: []\n        }\n        this.gridWrap = React.createRef();\n    }\n\n    componentDidMount() {\n        const {\n            innerWidth,\n            innerHeight\n        // } = this.gridWrap.current;\n        } = window;\n        const navbarHeight = document.getElementById('navbar').clientHeight;\n        const { gridData, dataSwapPoints } = this.props;\n        this.setState({\n            innerWidth,\n            innerHeight,\n            gridData,\n            gridHeight: window.innerHeight - navbarHeight,\n            dataSwapPoints\n        });\n        this.forceUpdate();\n    }\n\n    shouldComponentUpdate(newProps, state) {\n        const { gridData, dataSwapPoints } = newProps;\n        const oldNumGridDataUpdated = this.props.numGridDataUpdated;\n        const { numGridDataUpdated } = newProps;\n        if (numGridDataUpdated !== oldNumGridDataUpdated ) {\n            this.setState({\n                gridData,\n                dataSwapPoints\n            });\n            this.forceUpdate();\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const {\n            innerWidth,\n            innerHeight,\n            gridData,\n            gridHeight\n        } = this.state;\n\n        return (\n            <Wrapper ref={this.gridWrap}>\n                <XYPlot stackBy=\"y\" height={gridHeight} width={innerWidth} colorDomain={[0,1,2,3,4]}>\n                    <VerticalBarSeries data={gridData} animation></VerticalBarSeries>\n                </XYPlot>\n            </Wrapper>\n        );\n    }\n}\n\nconst Wrapper = styled.div`\n    width: 100%;\n`;\n\nconst mapStateToProps = state => {\n    const gridData = getGridData(state);\n    const numGridDataUpdated = getNumGridDataUpdated(state);\n    return { numGridDataUpdated, gridData };\n}\n\nexport default connect(mapStateToProps)(GridCanvas);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Navigation from './components/navbar';\nimport GridCanvas from './components/gridCanvas';\nimport { Container } from 'react-bootstrap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.store = this.props.store;\n    this.state = {\n      canvasSize: 12\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navigation defaultValue={this.state.canvasSize} store={this.store}></Navigation>\n        <NewContainer>\n          <Grid>\n            <GridCanvas></GridCanvas>\n          </Grid>\n        </NewContainer>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: white;\n`;\n\nconst NewContainer = styled(Container)`\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin: 0;\n  margin-left: -15px;\n`;\n\nconst Grid = styled.div`\n  /* position: absolute;\n  width: 89.55%;\n  height: 80%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: .5rem 1rem; */\n  background-color: white;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let newGridData = [];\nfor(let i = 0; i < 25; i++) {\n    newGridData.push({\n        x: i,\n        y: Math.floor(Math.random()*25) + 1,\n        color: 0\n    });\n}\n\nconst initialState = {\n    gridSize: newGridData.length,\n    gridData: JSON.parse(JSON.stringify(newGridData)),\n    numGridDataUpdated: 0 // keeps track of number of times the data was changed\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'CHANGE_GRID_SIZE':\n        // console.log(`Grid size changed from ${state.gridSize} to ${action.payload}`);\n        return Object.assign({}, state, {\n          gridSize: action.payload || 25\n        })\n      case 'CREATE_NEW_GRID':\n        // console.log(\"Data cleared!\");\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: Math.round(Math.random()*1000)\n        })\n      case 'SET_GRID_DATA':\n        // console.log('New Grid data received');\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: ++state.numGridDataUpdated\n        })\n      default:\n        return state\n    }\n  }","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap-grid.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}