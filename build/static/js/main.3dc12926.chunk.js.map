{"version":3,"sources":["redux/selectors/index.js","components/navbar.js","redux/actions/index.js","components/sidebar.js","components/gridCanvas.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getGridData","store","gridData","Navigation","props","handleGridSizeChange","changeGridSize","state","gridSize","handleCreateNewGrid","createNewGrid","handleResetGrid","numEventClicks","newGridData","map","tup","x","y","setGridData","console","log","setState","pause","refs","resetGridBtn","click","grid_change","bind","milliseconds","dt","Date","event","this","target","value","Container","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","ref","Form","inline","FormControl","type","placeholder","onChange","SubmitButton","variant","Component","styled","Button","connect","payload","SideBar","Wrapper","div","GridCanvas","clientWidth","clientHeight","gridWrap","React","createRef","current","newProps","oldGridData","height","width","data","App","canvasSize","defaultValue","Grid","SideBarWrapper","Boolean","window","location","hostname","match","initialState","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3dc12926.chunk.js","sourcesContent":["export const getGridSize = store => store.gridSize;\n\nexport const getGridData = store => store.gridData;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridData } from '../redux/selectors';\nimport { changeGridSize, createNewGrid, setGridData } from '../redux/actions';\n\nimport {\n    Container,\n    Button,\n    Navbar,\n    Nav,\n    Form,\n    FormControl\n} from 'react-bootstrap';\nimport styled from 'styled-components';\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            numEventClicks: 0\n        }\n        this.grid_change = this.grid_change.bind(this)\n        this.handleGridSizeChange = this.handleGridSizeChange.bind(this)\n\n    }\n\n    pause(milliseconds) {\n        var dt = new Date();\n        while ((new Date()) - dt <= milliseconds) { /* Do nothing */ }\n    }\n\n    handleGridSizeChange = () => {\n        this.props.changeGridSize(this.state.gridSize);\n    }\n\n    handleCreateNewGrid = () => {\n        this.props.createNewGrid();\n    }\n\n    handleResetGrid = () => {\n        const { gridData } = this.props;\n        let numEventClicks = this.state.numEventClicks;\n        let numOfClicks = 5;\n        let newGridData = gridData.map((tup) => {\n            return {\n               x: tup.x,\n               y: --tup.y\n            }\n        });\n        this.props.setGridData(newGridData);\n        if (numEventClicks < numOfClicks) {\n            console.log('test');\n            this.setState({ numEventClicks: numEventClicks++ });\n            console.log(`numEventClicks: ${numEventClicks}, num: ${numOfClicks}`)\n            this.pause(200);\n            this.refs.resetGridBtn.click();\n            this.handleResetGrid();\n        } else {\n            console.log('should not be in here');\n            // this.setState({ numEventClicks: 0});\n            return;\n        }\n    }\n\n    grid_change(event) {\n        this.setState({\n            gridSize: event.target.value\n        })\n    }\n\n    render() {\n        const {\n            gridSize\n        } = this.state;\n        return(\n            <Container>\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Viz-Sort</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#New\" onClick={this.handleCreateNewGrid}>New</Nav.Link>\n                        <Nav.Link href=\"#Reset\" ref=\"resetGridBtn\" onClick={this.handleResetGrid}>Reset</Nav.Link>\n                        </Nav>\n                        <Form inline>\n                        <FormControl type=\"text\" placeholder=\"12\" className=\"size_ctrl\" value={gridSize} onChange={this.grid_change}/>\n                        <SubmitButton variant=\"outline-success\" onClick={this.handleGridSizeChange}>Change Size</SubmitButton>\n                        </Form>\n                    </Navbar.Collapse>\n                </Navbar>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    const gridData = getGridData(store);\n    return { gridData };\n}\n\nconst SubmitButton = styled(Button)`\n    color: lightskyblue;\n    border: 1px solid lightskyblue;\n\n    &:hover, &:active, &:focus {\n        background-color: white !important;\n        border: 1px solid lightskyblue !important;\n        color: black !important;\n        box-shadow: none !important;\n        outline: none;\n\n    }\n`;\n\nexport default connect(mapStateToProps, { changeGridSize, createNewGrid, setGridData })(Navigation);","export const changeGridSize = (gridSize) => {\n    return {\n      type: 'CHANGE_GRID_SIZE',\n      payload: gridSize\n    }\n}\n\nexport const createNewGrid = () => {\n    return {\n        type: 'CREATE_NEW_GRID'\n    }\n}\n\nexport const setGridData = (gridData) => {\n    return {\n        type: 'SET_GRID_DATA',\n        payload: gridData\n    }\n}","import React, { Component } from 'react';\nimport {\n    Container,\n    Button,\n    Navbar,\n    Nav,\n    Form,\n    FormControl\n} from 'react-bootstrap';\nimport styled from 'styled-components';\n\nexport default class SideBar extends Component {\n    render() {\n        return (\n            <Wrapper>\n                <Navbar bg=\"dark\" variant = \"dark\">\n                <Navbar.Brand href=\"#home\">Stalin Sort</Navbar.Brand>\n                </Navbar>\n                <br />\n                <Navbar bg=\"dark\" variant = \"dark\">\n                    <Navbar.Brand>Insertion Sort</Navbar.Brand>\n                </Navbar>\n            </Wrapper>\n        )\n    }\n}\n\nconst Wrapper = styled.div`\n\n`","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport {\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis,\n    VerticalBarSeries\n} from 'react-vis';\n\nimport { getGridData } from '../redux/selectors';\n\nclass GridCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            clientWidth: 200,\n            clientHeight: 200,\n            gridData: []\n        }\n        this.gridWrap = React.createRef();\n    }\n\n    componentDidMount() {\n        const {\n            clientWidth,\n            clientHeight\n        } = this.gridWrap.current;\n        const { gridData } = this.props;\n        this.setState({\n            clientWidth,\n            clientHeight,\n            gridData\n        })\n    }\n\n    shouldComponentUpdate(newProps, state) {\n        const oldGridData = this.state.gridData;\n        const { gridData } = newProps;\n        // console.log(`OLD GRID: ${JSON.stringify(oldGridData)}`);\n        if (oldGridData !== gridData) {\n            this.setState({\n                gridData\n            });\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const {\n            clientWidth,\n            clientHeight,\n            gridData\n        } = this.state;\n        return (\n            <Wrapper ref={this.gridWrap}>\n                <XYPlot\n                    height={clientHeight}\n                    width={clientWidth}\n                >\n                <VerticalBarSeries data={gridData} />\n                </XYPlot>\n            </Wrapper>\n        );\n    }\n}\n\nconst Wrapper = styled.div`\n    width: 100%;\n    height: 100%;\n`;\n\nconst mapStateToProps = state => {\n    const gridData = getGridData(state);\n    return { gridData };\n}\n\nexport default connect(mapStateToProps)(GridCanvas);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Navigation from './components/navbar';\nimport SideBar from './components/sidebar';\nimport GridCanvas from './components/gridCanvas';\nimport { Container } from 'react-bootstrap';\n\nimport { changeGridSize, createNewGrid } from './redux/actions';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.store = this.props.store;\n    this.state = {\n      canvasSize: 12\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navigation defaultValue={this.state.canvasSize} store={this.store}></Navigation>\n        <Container>\n          <Grid>\n            <GridCanvas></GridCanvas>\n          </Grid>\n        </Container>\n        <SideBarWrapper>\n          <SideBar></SideBar>\n        </SideBarWrapper> \n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: lightskyblue;\n  position: absolute;\n`;\n\nconst SideBarWrapper = styled.div`\n  position: fixed;\n  width: 15em;\n`;\n\nconst Grid = styled.div`\n  position: absolute;\n  width: 81.25%;\n  height: 80%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: .5rem 1rem;\n  background-color: white;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    gridSize: 12,\n    gridData: [\n      {x: 0, y: 8},\n      {x: 1, y: 5},\n      {x: 2, y: 4},\n      {x: 3, y: 9},\n      {x: 4, y: 1},\n      {x: 5, y: 7},\n      {x: 6, y: 6},\n      {x: 7, y: 3},\n      {x: 8, y: 2},\n      {x: 9, y: 0}\n    ]\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'CHANGE_GRID_SIZE':\n        // console.log(`Grid size changed from ${state.gridSize} to ${action.payload}`);\n        return Object.assign({}, state, {\n          gridSize: action.payload || 12\n        })\n      case 'CREATE_NEW_GRID':\n        // console.log(\"Data cleared!\");\n        return Object.assign({}, state, {\n          gridData: []\n        })\n      case 'SET_GRID_DATA':\n        // console.log('New Grid data received');\n        return Object.assign({}, state, {\n          gridData: action.payload || []\n        })\n      default:\n        return state\n    }\n  }","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap-grid.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}