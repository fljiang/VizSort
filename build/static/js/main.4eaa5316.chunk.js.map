{"version":3,"sources":["redux/selectors/index.js","components/navbar.js","redux/actions/index.js","components/gridCanvas.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getGridData","store","gridData","resetPlotColors","map","data","x","y","color","Navigation","props","handleGridSizeChange","changeGridSize","state","gridSize","handleCreateNewGrid","newGridData","i","push","Math","floor","random","resetAllEvents","setState","gridDataLength","length","originalGridData","JSON","parse","stringify","setGridData","handleResetGrid","handleSelectionSort","currMin","currMinIndex","temp","j","setTimeout","handleStalinsort","splice","n","handleInsertionSort","currValue","handleGnomeSort","tempGridData","counter","windowWidth","window","innerWidth","$dropdown","document","getElementById","this","style","paddingLeft","highestTimeoutId","clearTimeout","event","target","value","NewContainer","id","NewNavbar","bg","expand","Navbar","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","onClick","NavDropdown","ref","title","Item","Form","inline","NewFormControl","type","placeholder","onChange","grid_change","SubmitButton","variant","Component","styled","FormControl","Container","Button","connect","payload","createNewGrid","GridCanvas","innerHeight","gridHeight","dataSwapPoints","gridWrap","React","createRef","navbarHeight","clientHeight","forceUpdate","newProps","oldNumGridDataUpdated","numGridDataUpdated","Wrapper","stackBy","height","width","colorDomain","animation","div","App","canvasSize","defaultValue","Grid","Boolean","location","hostname","match","initialState","createStore","action","Object","assign","round","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4eaa5316.chunk.js","sourcesContent":["export const getGridSize = store => store.gridSize;\n\nexport const getGridData = store => store.gridData;\n\nexport const getNumGridDataUpdated = store => store.numGridDataUpdated;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridData } from '../redux/selectors';\nimport { changeGridSize, createNewGrid, setGridData } from '../redux/actions';\n\nimport {\n    Container,\n    Button,\n    Navbar,\n    Nav,\n    Form,\n    FormControl,\n    NavDropdown\n} from 'react-bootstrap';\nimport styled from 'styled-components';\n\nconst resetPlotColors = (gridData) => {\n    return gridData.map(data => ({\n        x: data.x,\n        y: data.y,\n        color: 0\n    }));\n}\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            originalGridData: [],\n            gridDataLength: 0\n        }\n    }\n\n    componentDidMount() {\n        let windowWidth = window.innerWidth;\n        let $dropdown = document.getElementById('basic-nav-dropdown');\n\n        this.setState({\n            gridDataLength: this.props.gridData.length,\n            originalGridData: JSON.parse(JSON.stringify(this.props.gridData))\n        });\n\n        // fix mobile view\n        if(windowWidth < 992) {\n            $dropdown.style.paddingLeft = 0;\n        }\n    }\n\n    handleGridSizeChange = () => {\n        this.props.changeGridSize(this.state.gridSize);\n    }\n\n    handleCreateNewGrid = () => {\n        let newGridData = [];\n        for(let i = 0; i < 25; i++) {\n            newGridData.push({\n                x: i,\n                y: Math.floor(Math.random()*25) + 1,\n                color: 0\n            })\n        }\n        this.resetAllEvents();\n        this.setState({\n            gridDataLength: newGridData.length,\n            originalGridData: JSON.parse(JSON.stringify(newGridData))\n        });\n        this.props.setGridData(newGridData);\n    }\n\n    handleResetGrid = () => {\n        this.resetAllEvents();\n        this.setState({\n            gridDataLength: this.state.originalGridData.length\n        })\n        this.props.setGridData(JSON.parse(JSON.stringify(this.state.originalGridData)));\n    }\n\n    handleSelectionSort = () => {\n        let { gridDataLength } = this.state;\n        let currMin, currMinIndex, temp, j, gridData;\n        for (let i = 0; i < gridDataLength - 1; ++i) {\n            setTimeout(() => {\n                gridData = this.props.gridData;\n                for (j = i + 1; j < gridDataLength; j++) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[i].color = 4;\n                    currMin = gridData[i].y;\n                    currMinIndex = i\n                    if (gridData[j].y < currMin) {\n                        currMin = gridData[j].y;\n                        currMinIndex = j;\n                        gridData[currMinIndex].color = 2;\n                        this.props.setGridData(gridData);\n                    }\n                    temp = gridData[i].y;\n                    gridData[i].y = currMin;\n                    gridData[currMinIndex].y = temp;\n                }\n                this.props.setGridData(gridData);\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleStalinsort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j = 0;\n        for (let i = 0; i < gridDataLength - 1; i++) {\n            setTimeout(() => {\n                if (gridData[j].y > gridData[j + 1].y) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[j].color = 4;\n                    gridData.splice(j + 1, 1);\n                    for(let n = j + 1; n < gridDataLength - (i - j) - 1; n++) {\n                        gridData[n].x--;\n                    }\n                    j--;\n                }\n                this.props.setGridData(gridData);\n                j++;\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleInsertionSort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j, currValue;\n        for (let i = 1; i < gridDataLength; i++) {\n            setTimeout(() => {\n                currValue = gridData[i].y;\n                for (j = i - 1; j >= 0 && currValue < gridData[j].y; j--) {\n                    gridData[j + 1].y = gridData[j].y;\n                    if (j + 1 === i) {\n                        gridData[i].color = 4;\n                    } else {\n                        gridData[j + 1].color = 2;\n                    }\n                    gridData[j].color = 2;\n                    this.props.setGridData(gridData);\n                }\n                gridData[j + 1].y = currValue;\n                this.props.setGridData(gridData);\n                gridData = resetPlotColors(gridData);\n                if(i === gridDataLength - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleGnomeSort = () => {\n        let { gridData } = this.props;\n        let tempGridData = JSON.parse(JSON.stringify(gridData));\n        let { gridDataLength } = this.state;\n        let i = 0, counter = 0;\n        while (i < gridDataLength) {\n            counter++;\n            if (i == 0) { i++; }\n            if (tempGridData[i].y >= tempGridData[i - 1].y) {\n                i++;\n            } else {\n                let temp = tempGridData[i].y;\n                tempGridData[i].y = tempGridData[i - 1].y;\n                tempGridData[i - 1].y = temp;\n                i--;\n            }\n        }\n        i = 0;\n        for (let j = 0; j < counter; j++) {\n            setTimeout(() => {\n                gridData = resetPlotColors(gridData);\n                if (i > 0) {\n                    gridData[i].color = 4;\n                    gridData[i - 1].color = 2;\n                    this.props.setGridData(gridData);\n                    if (gridData[i].y < gridData[i - 1].y) {\n                        let temp = gridData[i].y;\n                        gridData[i].y = gridData[i - 1].y;\n                        gridData[i - 1].y = temp;\n                        i -= 2;\n                    }\n                    this.props.setGridData(gridData);\n                }\n                i++;\n                if(j === counter - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 50 * j);\n            \n        }\n    }\n\n    resetAllEvents() {\n        let highestTimeoutId = setTimeout(\";\");\n        for (let i = 0 ; i < highestTimeoutId ; i++) {\n            clearTimeout(i); \n        }\n    }\n\n    grid_change(event) {\n        this.setState({\n            gridSize: event.target.value\n        })\n    }\n\n    render() {\n        const {\n            gridSize\n        } = this.state;\n        return(\n            <NewContainer id=\"navbar\">\n                <NewNavbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Viz-Sort</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={this.handleCreateNewGrid}>New</Nav.Link>\n                        <Nav.Link onClick={this.handleResetGrid}>Reset</Nav.Link>\n                        </Nav>\n                        <NavDropdown ref=\"dropdownRef\" title=\"Sorts\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item onClick={this.handleStalinsort}>Stalin Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleSelectionSort}>Selection Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleInsertionSort}>Insertion Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleGnomeSort}>Gnome Sort</NavDropdown.Item>\n                        </NavDropdown>\n                        <Form inline>\n                        <NewFormControl type=\"text\" placeholder=\"F(x)=\" className=\"size_ctrl\"  onChange={this.grid_change}/>\n                        <SubmitButton variant=\"outline-success\" onClick={this.handleGridSizeChange}>Generate Graph</SubmitButton>\n                        </Form>\n                    </Navbar.Collapse>\n                </NewNavbar>\n            </NewContainer>\n        )\n    }\n}\n\nconst NewFormControl = styled(FormControl)`\n    font-family: cursive;\n`;\n\nconst NewContainer = styled(Container)`\n    width: 100%;\n    max-width: 100%;\n    margin: 0;\n    padding-left: 0;\n    padding-right: 0;\n    box-sizing: border-box;\n    border-bottom: 2px solid #eee;\n`;\n\nconst NewNavbar = styled(Navbar)`\n    width: 100%;\n`;\n\nconst mapStateToProps = store => {\n    const gridData = getGridData(store);\n    return { gridData };\n}\n\n\nconst SubmitButton = styled(Button)`\n    color: #007bff;\n    margin-left: 5px;\n    border: 1px solid #007bff;\n\n    &:hover, &:active, &:focus {\n        background-color: #007bff !important;\n        border: 1px solid #007bff !important;\n        /* color: black !important; */\n        box-shadow: none !important;\n        outline: none;\n\n    }\n`;\n\nexport default connect(mapStateToProps, { changeGridSize, createNewGrid, setGridData })(Navigation);","export const changeGridSize = (gridSize) => {\n    return {\n      type: 'CHANGE_GRID_SIZE',\n      payload: gridSize\n    }\n}\n\nexport const createNewGrid = (gridData) => {\n    return {\n        type: 'CREATE_NEW_GRID',\n        payload: gridData\n    }\n}\n\nexport const setGridData = (gridData) => {\n    return {\n        type: 'SET_GRID_DATA',\n        payload: gridData\n    }\n} ","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport {\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis,\n    VerticalBarSeries\n} from 'react-vis';\n\nimport { getGridData, getNumGridDataUpdated } from '../redux/selectors';\nimport verticalBarSeries from 'react-vis/dist/plot/series/vertical-bar-series';\n\nclass GridCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            innerWidth: 200,\n            innerHeight: 200,\n            gridHeight: 0,\n            gridData: [],\n            dataSwapPoints: []\n        }\n        this.gridWrap = React.createRef();\n    }\n\n    componentDidMount() {\n        const {\n            innerWidth,\n            innerHeight\n        // } = this.gridWrap.current;\n        } = window;\n        const navbarHeight = document.getElementById('navbar').clientHeight;\n        const { gridData, dataSwapPoints } = this.props;\n        this.setState({\n            innerWidth,\n            innerHeight,\n            gridData,\n            gridHeight: window.innerHeight - navbarHeight,\n            dataSwapPoints\n        });\n        this.forceUpdate();\n    }\n\n    shouldComponentUpdate(newProps, state) {\n        const { gridData, dataSwapPoints } = newProps;\n        const oldNumGridDataUpdated = this.props.numGridDataUpdated;\n        const { numGridDataUpdated } = newProps;\n        if (numGridDataUpdated !== oldNumGridDataUpdated ) {\n            this.setState({\n                gridData,\n                dataSwapPoints\n            });\n            this.forceUpdate();\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const {\n            innerWidth,\n            innerHeight,\n            gridData,\n            gridHeight\n        } = this.state;\n\n        return (\n            <Wrapper ref={this.gridWrap}>\n                <XYPlot stackBy=\"y\" height={gridHeight} width={innerWidth} colorDomain={[0,1,2,3,4]}>\n                    <VerticalBarSeries data={gridData} animation></VerticalBarSeries>\n                </XYPlot>\n            </Wrapper>\n        );\n    }\n}\n\nconst Wrapper = styled.div`\n    width: 100%;\n    /* height: 100%; */\n`;\n\nconst mapStateToProps = state => {\n    const gridData = getGridData(state);\n    const numGridDataUpdated = getNumGridDataUpdated(state);\n    return { numGridDataUpdated, gridData };\n}\n\nexport default connect(mapStateToProps)(GridCanvas);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Navigation from './components/navbar';\nimport GridCanvas from './components/gridCanvas';\nimport { Container } from 'react-bootstrap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.store = this.props.store;\n    this.state = {\n      canvasSize: 12\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navigation defaultValue={this.state.canvasSize} store={this.store}></Navigation>\n        <NewContainer>\n          <Grid>\n            <GridCanvas></GridCanvas>\n          </Grid>\n        </NewContainer>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: lightskyblue;\n`;\n\nconst NewContainer = styled(Container)`\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Grid = styled.div`\n  /* position: absolute;\n  width: 89.55%;\n  height: 80%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: .5rem 1rem; */\n  background-color: white;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let newGridData = [];\nfor(let i = 0; i < 25; i++) {\n    newGridData.push({\n        x: i,\n        y: Math.floor(Math.random()*25) + 1,\n        color: 0\n    });\n}\n\nconst initialState = {\n    gridSize: 12,\n    gridData: JSON.parse(JSON.stringify(newGridData)),\n    numGridDataUpdated: 0 // keeps track of number of times the data was changed\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'CHANGE_GRID_SIZE':\n        // console.log(`Grid size changed from ${state.gridSize} to ${action.payload}`);\n        return Object.assign({}, state, {\n          gridSize: action.payload || 12\n        })\n      case 'CREATE_NEW_GRID':\n        // console.log(\"Data cleared!\");\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: Math.round(Math.random()*1000)\n        })\n      case 'SET_GRID_DATA':\n        // console.log('New Grid data received');\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: ++state.numGridDataUpdated\n        })\n      default:\n        return state\n    }\n  }","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap-grid.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}