{"version":3,"sources":["redux/selectors/index.js","components/navbar.js","redux/actions/index.js","components/gridCanvas.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getGridData","store","gridData","resetPlotColors","map","data","x","y","color","Navigation","props","handleGridSizeChange","changeGridSize","state","gridSize","handleCreateNewGrid","newGridData","i","push","Math","floor","random","setState","gridDataLength","length","originalGridData","JSON","parse","stringify","setGridData","handleResetGrid","handleSelectionSort","currMin","currMinIndex","temp","j","setTimeout","handleStalinsort","splice","n","handleInsertionSort","currValue","this","windowWidth","window","innerWidth","$dropdown","document","getElementById","style","paddingLeft","event","target","value","Container","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","NavDropdown","ref","title","Item","Form","inline","FormControl","type","placeholder","onChange","grid_change","SubmitButton","variant","Component","styled","Button","connect","payload","createNewGrid","GridCanvas","clientWidth","clientHeight","dataSwapPoints","gridWrap","React","createRef","current","forceUpdate","newProps","oldNumGridDataUpdated","numGridDataUpdated","Wrapper","stackBy","height","width","colorDomain","animation","div","App","canvasSize","defaultValue","Grid","Boolean","location","hostname","match","initialState","createStore","action","Object","assign","round","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.652947ca.chunk.js","sourcesContent":["export const getGridSize = store => store.gridSize;\n\nexport const getGridData = store => store.gridData;\n\nexport const getNumGridDataUpdated = store => store.numGridDataUpdated;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridData } from '../redux/selectors';\nimport { changeGridSize, createNewGrid, setGridData } from '../redux/actions';\n\nimport {\n    Container,\n    Button,\n    Navbar,\n    Nav,\n    Form,\n    FormControl,\n    NavDropdown\n} from 'react-bootstrap';\nimport styled from 'styled-components';\n\nconst resetPlotColors = (gridData) => {\n    return gridData.map(data => ({\n        x: data.x,\n        y: data.y,\n        color: 0\n    }));\n}\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            originalGridData: [],\n            gridDataLength: 0,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            gridDataLength: this.props.gridData.length,\n            originalGridData: JSON.parse(JSON.stringify(this.props.gridData))\n        });\n\n        // fix mobile view\n        let windowWidth = window.innerWidth;\n        let $dropdown = document.getElementById('basic-nav-dropdown');\n        if(windowWidth < 992) {\n            $dropdown.style.paddingLeft = 0;\n        }\n    }\n\n    handleGridSizeChange = () => {\n        this.props.changeGridSize(this.state.gridSize);\n    }\n\n    handleCreateNewGrid = () => {\n        let newGridData = [];\n        for(let i = 0; i < 25; i++) {\n            newGridData.push({\n                x: i,\n                y: Math.floor(Math.random()*25) + 1,\n                color: 0\n            })\n        }\n        this.setState({\n            gridDataLength: newGridData.length,\n            originalGridData: JSON.parse(JSON.stringify(newGridData))\n        });\n        this.props.setGridData(newGridData);\n    }\n\n    handleResetGrid = () => {\n        this.setState({\n            gridDataLength: this.state.originalGridData.length\n        })\n        this.props.setGridData(JSON.parse(JSON.stringify(this.state.originalGridData)));\n    }\n\n    handleSelectionSort = () => {\n        let { gridDataLength } = this.state;\n        let currMin, currMinIndex, temp, j, gridData;\n        for (let i = 0; i < gridDataLength - 1; ++i) {\n            setTimeout(() => {\n                gridData = this.props.gridData;\n                for (j = i + 1; j < gridDataLength; j++) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[i].color = 4;\n                    currMin = gridData[i].y;\n                    currMinIndex = i\n                    if (gridData[j].y < currMin) {\n                        currMin = gridData[j].y;\n                        currMinIndex = j;\n                        gridData[currMinIndex].color = 2;\n                        this.props.setGridData(gridData);\n                    }\n                    temp = gridData[i].y;\n                    gridData[i].y = currMin;\n                    gridData[currMinIndex].y = temp;\n                }\n                this.props.setGridData(gridData);\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleStalinsort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j = 0;\n        for (let i = 0; i < gridDataLength - 1; i++) {\n            setTimeout(() => {\n                if (gridData[j].y > gridData[j + 1].y) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[i - (i - j)].color = 4;\n                    gridData.splice(j + 1, 1);\n                    for(let n = j + 1; n < gridDataLength - (i - j) - 1; n++) {\n                        gridData[n].x--;\n                    }\n                    j--;\n                }\n                this.props.setGridData(gridData);\n                j++;\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleInsertionSort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j, currValue;\n        for (let i = 1; i < gridDataLength; i++) {\n            setTimeout(() => {\n                currValue = gridData[i].y;\n                for (j = i - 1; j >= 0 && currValue < gridData[j].y; j--) {\n                    gridData[j + 1].y = gridData[j].y;\n                    if (j + 1 === i) {\n                        gridData[i].color = 4;\n                    } else {\n                        gridData[j + 1].color = 2;\n                    }\n                    gridData[j].color = 2;\n                    this.props.setGridData(gridData);\n                }\n                gridData[j + 1].y = currValue;\n                this.props.setGridData(gridData);\n                gridData = resetPlotColors(gridData);\n                if(i === gridDataLength - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 200 * i);\n        }\n    }\n\n    grid_change(event) {\n        this.setState({\n            gridSize: event.target.value\n        })\n    }\n\n    render() {\n        const {\n            gridSize\n        } = this.state;\n        return(\n            <Container>\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Viz-Sort</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={this.handleCreateNewGrid}>New</Nav.Link>\n                        <Nav.Link onClick={this.handleResetGrid}>Reset</Nav.Link>\n                        </Nav>\n                        <NavDropdown ref=\"dropdownRef\" title=\"Sorts\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item onClick={this.handleStalinsort}>Stalin Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleSelectionSort}>Selection Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleInsertionSort}>Insertion Sort</NavDropdown.Item>\n                        </NavDropdown>\n                        <Form inline>\n                        <FormControl type=\"text\" placeholder=\"12\" className=\"size_ctrl\" value={gridSize} onChange={this.grid_change}/>\n                        <SubmitButton variant=\"outline-success\" onClick={this.handleGridSizeChange}>Change Size</SubmitButton>\n                        </Form>\n                    </Navbar.Collapse>\n                </Navbar>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    const gridData = getGridData(store);\n    return { gridData };\n}\n\nconst SubmitButton = styled(Button)`\n    color: lightskyblue;\n    border: 1px solid lightskyblue;\n\n    &:hover, &:active, &:focus {\n        background-color: white !important;\n        border: 1px solid lightskyblue !important;\n        color: black !important;\n        box-shadow: none !important;\n        outline: none;\n\n    }\n`;\n\nexport default connect(mapStateToProps, { changeGridSize, createNewGrid, setGridData })(Navigation);","export const changeGridSize = (gridSize) => {\n    return {\n      type: 'CHANGE_GRID_SIZE',\n      payload: gridSize\n    }\n}\n\nexport const createNewGrid = (gridData) => {\n    return {\n        type: 'CREATE_NEW_GRID',\n        payload: gridData\n    }\n}\n\nexport const setGridData = (gridData) => {\n    return {\n        type: 'SET_GRID_DATA',\n        payload: gridData\n    }\n} ","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport {\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis,\n    VerticalBarSeries\n} from 'react-vis';\n\nimport { getGridData, getNumGridDataUpdated } from '../redux/selectors';\nimport verticalBarSeries from 'react-vis/dist/plot/series/vertical-bar-series';\n\nclass GridCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            clientWidth: 200,\n            clientHeight: 200,\n            gridData: [],\n            dataSwapPoints: []\n        }\n        this.gridWrap = React.createRef();\n    }\n\n    componentDidMount() {\n        const {\n            clientWidth,\n            clientHeight\n        } = this.gridWrap.current;\n        const { gridData, dataSwapPoints } = this.props;\n        this.setState({\n            clientWidth,\n            clientHeight,\n            gridData,\n            dataSwapPoints\n        });\n        this.forceUpdate();\n    }\n\n    shouldComponentUpdate(newProps, state) {\n        const { gridData, dataSwapPoints } = newProps;\n        const oldNumGridDataUpdated = this.props.numGridDataUpdated;\n        const { numGridDataUpdated } = newProps;\n        if (numGridDataUpdated !== oldNumGridDataUpdated ) {\n            this.setState({\n                gridData,\n                dataSwapPoints\n            });\n            this.forceUpdate();\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const {\n            clientWidth,\n            clientHeight,\n            gridData,\n        } = this.state;\n        return (\n            <Wrapper ref={this.gridWrap}>\n                <XYPlot stackBy=\"y\" height={clientHeight} width={clientWidth} colorDomain={[0,1,2,3,4]}>\n                    <VerticalBarSeries data={gridData} animation></VerticalBarSeries>\n                </XYPlot>\n            </Wrapper>\n        );\n    }\n}\n\nconst Wrapper = styled.div`\n    width: 100%;\n    height: 100%;\n`;\n\nconst mapStateToProps = state => {\n    const gridData = getGridData(state);\n    const numGridDataUpdated = getNumGridDataUpdated(state);\n    return { numGridDataUpdated, gridData };\n}\n\nexport default connect(mapStateToProps)(GridCanvas);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Navigation from './components/navbar';\nimport GridCanvas from './components/gridCanvas';\nimport { Container } from 'react-bootstrap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.store = this.props.store;\n    this.state = {\n      canvasSize: 12\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navigation defaultValue={this.state.canvasSize} store={this.store}></Navigation>\n        <Container>\n          <Grid>\n            <GridCanvas></GridCanvas>\n          </Grid>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: lightskyblue;\n  position: absolute;\n`;\n\nconst Grid = styled.div`\n  position: absolute;\n  width: 81.25%;\n  height: 80%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: .5rem 1rem;\n  background-color: white;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let newGridData = [];\nfor(let i = 0; i < 25; i++) {\n    newGridData.push({\n        x: i,\n        y: Math.floor(Math.random()*25) + 1,\n        color: 0\n    });\n}\n\nconst initialState = {\n    gridSize: 12,\n    gridData: JSON.parse(JSON.stringify(newGridData)),\n    numGridDataUpdated: 0 // keeps track of number of times the data was changed\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'CHANGE_GRID_SIZE':\n        // console.log(`Grid size changed from ${state.gridSize} to ${action.payload}`);\n        return Object.assign({}, state, {\n          gridSize: action.payload || 12\n        })\n      case 'CREATE_NEW_GRID':\n        // console.log(\"Data cleared!\");\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: Math.round(Math.random()*1000)\n        })\n      case 'SET_GRID_DATA':\n        // console.log('New Grid data received');\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: ++state.numGridDataUpdated\n        })\n      default:\n        return state\n    }\n  }","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap-grid.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}