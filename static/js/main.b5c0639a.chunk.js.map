{"version":3,"sources":["redux/selectors/index.js","redux/actions/index.js","components/slider.js","components/navbar.js","components/gridCanvas.js","App.js","serviceWorker.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["getGridSize","store","gridSize","getGridData","gridData","changeGridSize","type","payload","Slider","props","state","isDragging","originalX","translateX","lastTranslateX","boundingWidth","maxGridSize","currGridSize","handleMouseDown","bind","handleMouseMove","handleMouseUp","xPosition","this","refs","barRef","clientWidth","setState","window","removeEventListener","ev","clientX","addEventListener","handleGridSizeChange","barWidth","newGridSize","Math","round","createNewGrid","handleLocalGridSizeChange","Bar","ref","Ball","onMouseDown","x","Popup","Component","Container","styled","div","attrs","style","transform","css","connect","resetPlotColors","map","data","y","color","Navigation","handleCreateNewGrid","newGridData","i","push","floor","random","resetAllEvents","gridDataLength","length","originalGridData","JSON","parse","stringify","setGridData","handleResetGrid","handleSelectionSort","currMin","currMinIndex","temp","j","setTimeout","handleStalinsort","splice","n","handleInsertionSort","currValue","handleGnomeSort","tempGridData","counter","submitNewExpression","key","handleNewExpression","expressionStr","newGraphRef","value","evaluate","console","log","border","expression","setExpressionGraph","handleSliderNewGrid","isExpressionGraph","windowWidth","innerWidth","$dropdown","document","getElementById","paddingLeft","highestTimeoutId","clearTimeout","NewContainer","id","NewNavbar","bg","expand","Navbar","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","onClick","StyledNavDropdown","title","NavDropdown","Item","Form","action","onKeyDown","inline","NewFormControl","placeholder","SubmitButton","variant","FormControl","Button","getIsExpressionGraph","GridCanvas","innerHeight","gridHeight","dataSwapPoints","gridWrap","React","createRef","navbarHeight","clientHeight","forceUpdate","newProps","oldNumGridDataUpdated","numGridDataUpdated","Wrapper","stackBy","height","width","colorType","colorDomain","colorRange","animation","App","canvasSize","defaultValue","Grid","Boolean","location","hostname","match","initialState","createStore","Object","assign","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5c0639a.chunk.js","sourcesContent":["export const getGridSize = store => store.gridSize;\n\nexport const getGridData = store => store.gridData;\n\nexport const getNumGridDataUpdated = store => store.numGridDataUpdated;\n\nexport const getIsExpressionGraph = store => store.isExpressionGraph;","export const changeGridSize = (gridSize) => {\n    return {\n      type: 'CHANGE_GRID_SIZE',\n      payload: gridSize\n    }\n}\n\nexport const setExpressionGraph = (gridData) => {\n    return {\n        type: 'SET_EXPRESSION_GRAPH',\n        payload: gridData\n    }\n}\n\nexport const createNewGrid = (gridData) => {\n    return {\n        type: 'CREATE_NEW_GRID',\n        payload: gridData\n    }\n}\n\nexport const setGridData = (gridData) => {\n    return {\n        type: 'SET_GRID_DATA',\n        payload: gridData\n    }\n} ","import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport { connect } from 'react-redux';\nimport { getGridSize } from '../redux/selectors';\nimport { changeGridSize } from '../redux/actions';\n\nclass Slider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDragging: false,\n\n            originalX: 0,\n            translateX: 0,\n            lastTranslateX: 0,\n            boundingWidth: 0,\n\n            maxGridSize: 50,\n            currGridSize: 25,\n        };\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            xPosition\n        } = this.props;\n        const { barRef } = this.refs;\n        const boundingWidth = barRef.clientWidth - 16;\n        this.setState({\n            xPosition,\n            boundingWidth,\n            translateX: boundingWidth/2,\n            lastTranslateX: boundingWidth/2\n         });\n        \n\n        // calculate initial X position here based on scale 5 - 50 x coords\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n\n    handleMouseDown(ev) {\n        let { clientX } = ev;\n        // mousemove: obtain cursor position\n        // mouseup: save position for the element\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mouseup', this.handleMouseUp);\n\n        this.setState({\n          originalX: clientX,\n          isDragging: true\n        });\n    }\n\n    handleMouseMove(ev) {\n        let { clientX } = ev;\n        const {\n            isDragging,\n            boundingWidth,\n            originalX,\n            lastTranslateX,\n         } = this.state;\n        let translateX = clientX - originalX + lastTranslateX;\n\n        if (!isDragging) {\n            return;\n        }\n\n        if (translateX > boundingWidth) {\n            translateX = boundingWidth;\n        }\n        if (translateX < 0) {\n            translateX = 0;\n        }\n        \n        this.setState({ translateX });\n    }\n\n    handleMouseUp() {\n        this.setState({\n            originalX: 0,\n            lastTranslateX: this.state.translateX,\n            isDragging: false\n        });\n\n        this.handleGridSizeChange();\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n    \n    handleGridSizeChange() {\n        const barWidth = this.refs.barRef.clientWidth - 16;\n        const { lastTranslateX, maxGridSize } = this.state;\n        const newGridSize = Math.round(lastTranslateX/barWidth * maxGridSize);\n        \n        this.props.changeGridSize(newGridSize > 2 ? newGridSize : 2);\n        this.props.createNewGrid();\n    }\n\n    handleLocalGridSizeChange() {\n        const { boundingWidth, lastTranslateX, maxGridSize } = this.state;\n        let newGridSize = Math.round(lastTranslateX/boundingWidth * maxGridSize);\n        return (newGridSize > 2) ? newGridSize : 2;\n    }\n\n    render() {\n        const {\n            translateX,\n            isDragging\n        } = this.state;\n        const newGridSize = this.handleLocalGridSizeChange();\n\n        return (\n            <Container>\n                <Bar\n                    ref=\"barRef\"\n                >\n                    <Ball\n                        ref=\"ballRef\"\n                        onMouseDown={this.handleMouseDown}\n                        x={translateX}\n                        isDragging={isDragging}   \n                    >\n                        <Popup>{newGridSize}</Popup>\n                    </Ball>\n                </Bar>\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const gridSize = getGridSize(state);\n    return { gridSize };\n}\n\nconst Container = styled.div`\n    position: relative;\n    width: 10rem;\n    height: 2rem; \n`;\n\nconst Bar = styled.div`\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 9.5rem;\n    height: 5px;\n    border-radius: 2px;\n    background-color: royalblue;\n`;\n\nconst Popup = styled.div`\n    position: absolute;\n    top: -50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 10px;\n`;\n\nconst Ball = styled.div.attrs({\n    style: ({ x }) => ({\n        transform: `translate(${x}px, -50%)`\n    }),\n})`\n    cursor: grab;\n    position: absolute;\n    top: 50%;\n    left: 0;\n    transform: translateY(-50%);\n    width: 1rem;\n    height: 1rem;\n    border-radius: 50%;\n    background-color: #d3d3d3;\n\n    ${({ isDragging }) => \n    isDragging && css`\n        cursor: grabbing;\n    `};\n`;\n\nexport default connect(mapStateToProps, { changeGridSize })(Slider)\n","/* eslint-disable no-implied-eval */\n/* eslint-disable no-loop-func */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { parse } from 'mathjs';\nimport { getGridData, getGridSize, getIsExpressionGraph } from '../redux/selectors';\nimport { changeGridSize, createNewGrid, setGridData, setExpressionGraph } from '../redux/actions';\n\nimport {\n    Container,\n    Button,\n    Navbar,\n    Nav,\n    Form,\n    FormControl,\n    NavDropdown\n} from 'react-bootstrap';\nimport styled from 'styled-components';\n\nimport Slider from './slider';\n\nconst resetPlotColors = (gridData) => {\n    return gridData.map(data => ({\n        x: data.x,\n        y: data.y,\n        color: 0\n    }));\n}\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            originalGridData: [],\n            gridDataLength: 0\n        }\n    }\n\n    componentDidMount() {\n        let windowWidth = window.innerWidth;\n        let $dropdown = document.getElementById('basic-nav-dropdown');\n\n        this.setState({\n            gridDataLength: this.props.gridData.length,\n            originalGridData: JSON.parse(JSON.stringify(this.props.gridData))\n        });\n\n        // fix mobile view\n        if(windowWidth < 992) {\n            $dropdown.style.paddingLeft = 0;\n        }\n    }\n\n    handleCreateNewGrid = () => {\n        const { gridSize } = this.props;\n        let newGridData = [];\n\n        for(let i = 0; i < gridSize; i++) {\n            newGridData.push({\n                x: i,\n                y: Math.floor(Math.random() * 25) + 1,\n                color: 0\n            })\n        }\n        this.resetAllEvents();\n        this.setState({\n            gridDataLength: newGridData.length,\n            originalGridData: JSON.parse(JSON.stringify(newGridData))\n        });\n        this.props.setGridData(newGridData);\n    }\n\n    handleResetGrid = () => {\n        this.resetAllEvents();\n        this.setState({\n            gridDataLength: this.state.originalGridData.length\n        })\n        this.props.setGridData(JSON.parse(JSON.stringify(this.state.originalGridData)));\n    }\n\n    handleSelectionSort = () => {\n        let { gridDataLength } = this.state;\n        let currMin, currMinIndex, temp, j, gridData;\n        this.resetAllEvents();\n        for (let i = 0; i < gridDataLength - 1; ++i) {\n            setTimeout(() => {\n                gridData = this.props.gridData;\n                for (j = i + 1; j < gridDataLength; j++) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[i].color = 1;\n                    currMin = gridData[i].y;\n                    currMinIndex = i\n                    if (gridData[j].y < currMin) {\n                        currMin = gridData[j].y;\n                        currMinIndex = j;\n                        gridData[currMinIndex].color = 2;\n                        this.props.setGridData(gridData);\n                    }\n                    temp = gridData[i].y;\n                    gridData[i].y = currMin;\n                    gridData[currMinIndex].y = temp;\n                }\n                this.props.setGridData(gridData);\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleStalinsort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j = 0;\n        this.resetAllEvents();\n        for (let i = 0; i < gridDataLength - 1; i++) {\n            setTimeout(() => {\n                if (gridData[j].y > gridData[j + 1].y) {\n                    gridData = resetPlotColors(gridData);\n                    gridData[j].color = 1;\n                    gridData.splice(j + 1, 1);\n                    for(let n = j + 1; n < gridDataLength - (i - j) - 1; n++) {\n                        gridData[n].x--;\n                    }\n                    j--;\n                }\n                this.props.setGridData(gridData);\n                j++;\n                if (i === gridDataLength - 2) {\n                    this.props.setGridData(resetPlotColors(gridData));\n                    this.setState({\n                        gridDataLength: gridData.length\n                    });\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleInsertionSort = () => {\n        let { gridData } = this.props;\n        let { gridDataLength } = this.state;\n        let j, currValue;\n        this.resetAllEvents();\n        for (let i = 1; i < gridDataLength; i++) {\n            setTimeout(() => {\n                currValue = gridData[i].y;\n                for (j = i - 1; j >= 0 && currValue < gridData[j].y; j--) {\n                    gridData[j + 1].y = gridData[j].y;\n                    if (j + 1 === i) {\n                        gridData[i].color = 1;\n                    } else {\n                        gridData[j + 1].color = 2;\n                    }\n                    gridData[j].color = 2;\n                    this.props.setGridData(gridData);\n                }\n                gridData[j + 1].y = currValue;\n                this.props.setGridData(gridData);\n                gridData = resetPlotColors(gridData);\n                if(i === gridDataLength - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 200 * i);\n        }\n    }\n\n    handleGnomeSort = () => {\n        let { gridData } = this.props;\n        let tempGridData = JSON.parse(JSON.stringify(gridData));\n        let { gridDataLength } = this.state;\n        let i = 0, counter = 0;\n        this.resetAllEvents();\n        while (i < gridDataLength) {\n            counter++;\n            if (i === 0) { i++; }\n            if (tempGridData[i].y >= tempGridData[i - 1].y) {\n                i++;\n            } else {\n                let temp = tempGridData[i].y;\n                tempGridData[i].y = tempGridData[i - 1].y;\n                tempGridData[i - 1].y = temp;\n                i--;\n            }\n        }\n        i = 0;\n        for (let j = 0; j < counter; j++) {\n            setTimeout(() => {\n                gridData = resetPlotColors(gridData);\n                if (i > 0) {\n                    gridData[i].color = 1;\n                    gridData[i - 1].color = 2;\n                    this.props.setGridData(gridData);\n                    if (gridData[i].y < gridData[i - 1].y) {\n                        let temp = gridData[i].y;\n                        gridData[i].y = gridData[i - 1].y;\n                        gridData[i - 1].y = temp;\n                        i -= 2;\n                    }\n                    this.props.setGridData(gridData);\n                }\n                i++;\n                if(j === counter - 1) {\n                    gridData = resetPlotColors(gridData);\n                    this.props.setGridData(gridData);\n                }\n            }, 50 * j);\n\n        }\n    }\n\n    submitNewExpression = (ev) => {\n        if (ev.key === 'Enter') {\n            this.handleNewExpression();\n        }\n    }\n\n    handleNewExpression = () => {\n        let { gridSize } = this.props;\n        const expressionStr = this.refs.newGraphRef.value;\n        const { newGraphRef } = this.refs;\n        const gridData = [];\n\n        try {\n            parse(expressionStr).evaluate({x: 1});\n        } catch {\n            console.log(`Invalid expression: ${expressionStr}`);\n            newGraphRef.style.border = '2px solid red';\n            return null;\n        }\n        const expression = parse(expressionStr);\n        this.resetAllEvents();\n        for (let i = 0; i < gridSize; i++) {\n            gridData.push({\n                x: i,\n                y: expression.evaluate({x: i}),\n                color: 0\n            });\n        }\n        this.props.setExpressionGraph(gridData);\n    }\n\n    handleSliderNewGrid = () => {\n        const {\n            isExpressionGraph\n         } = this.props;\n         isExpressionGraph ? this.handleNewExpression() : this.handleCreateNewGrid();\n    }\n\n    resetAllEvents() {\n        let highestTimeoutId = setTimeout(\";\");\n        for (let i = 0 ; i < highestTimeoutId ; i++) {\n            clearTimeout(i);\n        }\n    }\n\n    render() {\n        return(\n            <NewContainer id=\"navbar\">\n                <NewNavbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Viz-Sort</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={this.handleCreateNewGrid}>New</Nav.Link>\n                        <Nav.Link onClick={this.handleResetGrid}>Reset</Nav.Link>\n                        </Nav>\n                        <Slider createNewGrid={this.handleSliderNewGrid.bind(this)} />\n                        <StyledNavDropdown title=\"Sorts\">\n                            <NavDropdown.Item onClick={this.handleStalinsort}>Stalin Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleSelectionSort}>Selection Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleInsertionSort}>Insertion Sort</NavDropdown.Item>\n                            <NavDropdown.Item onClick={this.handleGnomeSort}>Gnome Sort</NavDropdown.Item>\n                        </StyledNavDropdown>\n\n                        <Form\n                            action=\"javascript:void(-1)\"\n                            onKeyDown={this.submitNewExpression}\n                            inline>\n                        <NewFormControl type=\"text\" placeholder=\"F(x)\" ref=\"newGraphRef\" className=\"size_ctrl\" />\n                        <SubmitButton variant=\"outline-success\" onClick={this.handleNewExpression}>Generate Graph</SubmitButton>\n                        </Form>\n                    </Navbar.Collapse>\n                </NewNavbar>\n            </NewContainer>\n        )\n    }\n}\n\nconst NewFormControl = styled(FormControl)`\n    font-family: cursive;\n    box-sizing: border-box;\n    :focus {\n        box-shadow: none;\n        outline: none;\n    }\n`;\n\nconst StyledNavDropdown = styled(NavDropdown)`\n    a {\n        color: royalblue;\n    }\n`;\n\nconst NewContainer = styled(Container)`\n    width: 100%;\n    max-width: 100%;\n    margin: 0;\n    padding-left: 0;\n    padding-right: 0;\n`;\n\nconst NewNavbar = styled(Navbar)`\n    width: calc(15px + 100%);\n    border-bottom: 2px solid #eee;\n`;\n\nconst mapStateToProps = store => {\n    const gridData = getGridData(store);\n    const gridSize = getGridSize(store);\n    const isExpressionGraph = getIsExpressionGraph(store);\n    return { gridData, gridSize, isExpressionGraph };\n}\n\n\nconst SubmitButton = styled(Button)`\n    color: royalblue;\n    margin-left: 5px;\n    border: 1px solid royalblue;\n\n    &:hover, &:active, &:focus {\n        background-color: royalblue !important;\n        border: 1px solid royalblue !important;\n        box-shadow: none !important;\n        outline: none;\n\n    }\n`;\n\nexport default connect(mapStateToProps, { changeGridSize, createNewGrid, setGridData, setExpressionGraph })(Navigation);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport {\n    HorizontalGridLines,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis,\n    VerticalBarSeries,\n    Hint,\n    VerticalRectSeries,\n    MarkSeries,\n    LineMarkSeries,\n    LineSeries\n} from 'react-vis';\n\nimport { getGridData, getNumGridDataUpdated } from '../redux/selectors';\n\nclass GridCanvas extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridSize: 12,\n            innerWidth: 200,\n            innerHeight: 200,\n            gridHeight: 0,\n            gridData: [],\n            dataSwapPoints: []\n        }\n        this.gridWrap = React.createRef();\n    }\n\n    componentDidMount() {\n        const {\n            innerWidth,\n            innerHeight\n        // } = this.gridWrap.current;\n        } = window;\n        const navbarHeight = document.getElementById('navbar').clientHeight;\n        const { gridData, dataSwapPoints } = this.props;\n        this.setState({\n            innerWidth,\n            innerHeight,\n            gridData,\n            gridHeight: window.innerHeight - navbarHeight - 20,\n            dataSwapPoints\n        });\n        this.forceUpdate();\n    }\n\n    shouldComponentUpdate(newProps, state) {\n        const { gridData, dataSwapPoints } = newProps;\n        const oldNumGridDataUpdated = this.props.numGridDataUpdated;\n        const { numGridDataUpdated } = newProps;\n        if (numGridDataUpdated !== oldNumGridDataUpdated ) {\n            this.setState({\n                gridData,\n                dataSwapPoints\n            });\n            this.forceUpdate();\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const {\n            innerWidth,\n            gridData,\n            gridHeight\n        } = this.state;\n\n        return (\n            <Wrapper ref={this.gridWrap}>\n                <XYPlot stackBy=\"y\" height={gridHeight} width={innerWidth} colorType=\"category\" colorDomain={[0,1,2]} colorRange={[\"royalblue\", \"orange\", \"purple\"]}>\n                    <VerticalBarSeries data={gridData} animation></VerticalBarSeries>\n                </XYPlot>\n            </Wrapper>\n        );\n    }\n}\n\nconst Wrapper = styled.div`\n    width: 100%;\n`;\n\nconst mapStateToProps = state => {\n    const gridData = getGridData(state);\n    const numGridDataUpdated = getNumGridDataUpdated(state);\n    return { numGridDataUpdated, gridData };\n}\n\nexport default connect(mapStateToProps)(GridCanvas);","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Navigation from './components/navbar';\nimport GridCanvas from './components/gridCanvas';\nimport { Container } from 'react-bootstrap';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.store = this.props.store;\n    this.state = {\n      canvasSize: 12\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navigation defaultValue={this.state.canvasSize} store={this.store}></Navigation>\n        <NewContainer>\n          <Grid>\n            <GridCanvas></GridCanvas>\n          </Grid>\n        </NewContainer>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: white;\n`;\n\nconst NewContainer = styled(Container)`\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Grid = styled.div`\n  /* position: absolute;\n  width: 89.55%;\n  height: 80%;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: .5rem 1rem; */\n  background-color: white;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let newGridData = [];\nfor(let i = 0; i < 25; i++) {\n    newGridData.push({\n        x: i,\n        y: Math.floor(Math.random()*25) + 1,\n        color: 0\n    });\n}\n\nconst initialState = {\n    gridSize: newGridData.length,\n    gridData: JSON.parse(JSON.stringify(newGridData)),\n    isExpressionGraph: false,\n    expression: '',\n    numGridDataUpdated: 0 // keeps track of number of times the data was changed\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n      case 'CHANGE_GRID_SIZE':\n        // console.log(`Grid size changed from ${state.gridSize} to ${action.payload}`);\n        return Object.assign({}, state, {\n          gridSize: action.payload || 25\n        })\n      case 'CREATE_NEW_GRID':\n        // console.log(\"Data cleared!\");\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: Math.round(Math.random()*1000)\n        })\n      case 'SET_GRID_DATA':\n        // console.log('New Grid data received');\n        return Object.assign({}, state, {\n          gridData: action.payload || [],\n          numGridDataUpdated: ++state.numGridDataUpdated,\n          isExpressionGraph: false\n        })\n      case 'SET_EXPRESSION_GRAPH':\n        return Object.assign({}, state, {\n          gridData: action.payload,\n          numGridDataUpdated: ++state.numGridDataUpdated,\n          isExpressionGraph: true\n        })\n      default:\n        return state\n    }\n  }","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\nimport './bootstrap-4.3.1-dist/css/bootstrap-grid.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}